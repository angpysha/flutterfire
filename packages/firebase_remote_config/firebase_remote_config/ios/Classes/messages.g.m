// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation PigeonValueSourceBox
- (instancetype)initWithValue:(PigeonValueSource)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

NSObject<FlutterMessageCodec> *RemoteConfigHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpRemoteConfigHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RemoteConfigHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.ensureInitialized"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(ensureInitializedAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(ensureInitializedAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api ensureInitializedAppName:arg_appName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.activate"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(activateAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api activateAppName:arg_appName completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.fetch"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(fetchAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api fetchAppName:arg_appName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.fetchAndActivate"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchAndActivateAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(fetchAndActivateAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api fetchAndActivateAppName:arg_appName completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.setConfigSettings"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setConfigSettingsAppName:fetchTimeout:minimumFetchInterval:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(setConfigSettingsAppName:fetchTimeout:minimumFetchInterval:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        NSInteger arg_fetchTimeout = [GetNullableObjectAtIndex(args, 1) integerValue];
        NSInteger arg_minimumFetchInterval = [GetNullableObjectAtIndex(args, 2) integerValue];
        [api setConfigSettingsAppName:arg_appName fetchTimeout:arg_fetchTimeout minimumFetchInterval:arg_minimumFetchInterval completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.setDefaults"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDefaultsAppName:defaultParameters:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(setDefaultsAppName:defaultParameters:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_defaultParameters = GetNullableObjectAtIndex(args, 1);
        [api setDefaultsAppName:arg_appName defaultParameters:arg_defaultParameters completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.getAll"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(getAllAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api getAllAppName:arg_appName completion:^(NSDictionary<id, id> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.firebase_remote_config_platform_interface.RemoteConfigHostApi.getProperties"
        binaryMessenger:binaryMessenger
        codec:RemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPropertiesAppName:completion:)], @"RemoteConfigHostApi api (%@) doesn't respond to @selector(getPropertiesAppName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appName = GetNullableObjectAtIndex(args, 0);
        [api getPropertiesAppName:arg_appName completion:^(NSDictionary<id, id> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
