// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_remote_config_windows {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class RemoteConfigHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class PigeonValueSource {
  // The value was defined by a static constant.
  valueStatic = 0,
  // The value was defined by default config.
  valueDefault = 1,
  // The value was defined by fetched config.
  valueRemote = 2
};
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class RemoteConfigHostApi {
 public:
  RemoteConfigHostApi(const RemoteConfigHostApi&) = delete;
  RemoteConfigHostApi& operator=(const RemoteConfigHostApi&) = delete;
  virtual ~RemoteConfigHostApi() {}
  virtual void EnsureInitialized(
    const std::string& app_name,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Activate(
    const std::string& app_name,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void Fetch(
    const std::string& app_name,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void FetchAndActivate(
    const std::string& app_name,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void SetConfigSettings(
    const std::string& app_name,
    int64_t fetch_timeout,
    int64_t minimum_fetch_interval,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetDefaults(
    const std::string& app_name,
    const flutter::EncodableMap& default_parameters,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void GetAll(
    const std::string& app_name,
    std::function<void(ErrorOr<std::optional<flutter::EncodableMap>> reply)> result) = 0;
  virtual void GetProperties(
    const std::string& app_name,
    std::function<void(ErrorOr<std::optional<flutter::EncodableMap>> reply)> result) = 0;

  // The codec used by RemoteConfigHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `RemoteConfigHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    RemoteConfigHostApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  RemoteConfigHostApi() = default;

};
}  // namespace firebase_remote_config_windows
#endif  // PIGEON_MESSAGES_G_H_
